
#include "symtable.h"

//vytvori tabulku, ktera neobsahuje zadny uzel
t_symTable tableInit()
{
	t_symTable table;
	table.root = NULL;

	return table;
}

//prevede string na cislo, aby jsme mohli efektivne ulozit do stromu
unsigned hash(string *str)
{
/*
	Prevede string na ciselnou hodnotu
	@param str - vstupni string
	@return unsigned long ciselna hodnota, ktera reprezentuje vstupni string
	*/
	unsigned long key = 0;
	int n = 1;
	int len = stringGetLength(str);
	char *chr = stringGet(str);
		
		for(int i = 0; i < len; i++)
		{
			key += n * (int)chr[i];
			n++;
		}
	
	return key;
}

/* hleda ve stromu idenditu s tokenem
 - pokud nalezne vrati ukazatel na danou polozku v tabulce, pokud ne tak NULL  */
t_binTree* tableSearchToken(t_symTable *table, t_Token token)
{
	int key = hash(&token.attr);	
	t_binTree *temp = table->root;	

	while (temp != NULL)
	{
		if (temp->data->key >= key)
		{
			if (stringCompare(temp->data->s, &token.attr)) //muze nastat kolize
				return temp; //pokud se rovna i ve stringu tak jsem ho nalezli
			else
				temp = temp->right;
		}
		else
		{
			temp = temp->left;
		}
	}
	return NULL;
}

void tableInsertToken(t_symTable *table, t_Token token)
{
	if (tableSearchToken(table, token) == NULL)
	{
		t_binTree *new = malloc(sizeof(t_binTree));
		if (new == NULL)
			return ; // TODO

		new->left = new->right = NULL;
		new->data = malloc(sizeof(t_Data));
		if (new->data == NULL)
			return ; // TODO

		new->data->key = hash(&token.attr);


		new->data->s = malloc(sizeof(string));

	//	printf("here\n");
		stringInit(new->data->s);
	//	printf("here\n");
		stringInsert(new->data->s, token.attr.val); 
	//	printf("here\n");


		if (table->root == NULL) //first
		{
			table->root = new;
		}
		else
		{
			t_binTree *temp = table->root;
			while (temp!= NULL)
			{
				if (temp->data->key < new->data->key)
				{
					if (temp->right == NULL)
					{
						temp->right = new;
						break;
					}
					temp = temp->right;
				}
				else
				{
					if (temp->left == NULL)
					{
						temp->left = new;
						break;
					}
					temp = temp->left;
				}
			}
		}

		//printf("%d\n", table->root->data->key);
	}
	else
		printf("lul\n");
}

void tableDestroy(t_symTable *t)


/* DEBUG */

void tablePrint(t_binTree *root)
{
	if (root != NULL)
	{
		printf("%u\n", root->data->key);
		tablePrint(root->left);
		tablePrint(root->right);
	}
}


int main()
{
	t_symTable table = tableInit();

	string s;
	stringInit(&s);
	stringInsert(&s, "ahoj");
	t_Token token = { .type = 2, .attr = s};
	tableInsertToken(&table, token);
	
	string s2;
	stringInit(&s2);
	stringInsert(&s2, "ahojs");
	t_Token token2 = { .type = 2, .attr = s2};
	tableInsertToken(&table, token2);
	
	string s3;
	stringInit(&s3);
	stringInsert(&s3, "ahjs");
	t_Token token3 = { .type = 2, .attr = s3};
	tableInsertToken(&table, token3);
	

	tablePrint(table.root);

	return 0;
}

